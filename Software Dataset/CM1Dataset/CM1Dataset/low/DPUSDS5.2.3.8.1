Write-Protect Text Segment and Interrupt Vector Table	In order to prevent a rogue software task from inadvertently overwriting the flight software, the area of memory containing the flight software and interrupt vector table is write protected at bootup. The pages containing the text segment of DPU-RTOS and the Interrupt Vector Table (IVT) are write protected by using the rscSetPageProtect() function provided by the VxWorks® Board Support Package (BSP).  These functions are included into the VxWorks® build by asserted INCLUDE_PROTECT_TEXT and INCLUDE_PROTECT_VEC_TABLE in configAll.h. Since a VxWorks® build cannot be assumed to end on a memory page boundary, a NULL memory page is added to the beginning of the data segment to ensure that a page first page of the data segment does not overlap a protected text segment.  VxWorks provides this in the file dataSegPad.c, but does so only if INCLUDE_MMU_FULL is defined, which it is not in this configuration since a separate MMU module must be purchased for this option to be valid.  Therefore, an additional #ifdef case is added to dataSegPad.c so that the extra text segment is added when INCLUDE_PROTECT_TEXT is defined. 	VxWorks? does not provide a mechanism to determine the state of the page protection flags set in the Page Frame Table (PFT).  A custom routine must provide access to these. This routine gets the value of the page protection flags for a memory address.  It returns PAGE_READ_ONLY, PAGE_READ_WRITE, or ERROR. In order to access the page protection flags, the Storage Description Registers, SDR0 and SDR1, must be accessed to determine the origins of the Hash Allocation Table (HAT) and the Page Frame Table (PFT).  